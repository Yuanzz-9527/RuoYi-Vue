<template>
  <div class="${businessName}-page art-full-height">
    <!-- 搜索栏 -->
    <ArtSearchBar
      v-model:filter="formFilters"
      :items="formItems"
      @reset="handleResetSearch()"
      @search="handleSearch()"
    ></ArtSearchBar>

    <ElCard class="art-table-card" shadow="never">
      <!-- 表格头部 -->
      <ArtTableHeader :showZebra="false" v-model:columns="columnChecks" @refresh="refreshAll">
        <template #left>
          <ElButton
            @click="showDialog('add')"
            type="primary"
            plain
            v-ripple
            v-auth="'${moduleName}:${businessName}:add'"
            >新增</ElButton
          >
          <ElButton
            @click="showDialog('edit')"
            type="success"
            plain
            :disabled="single"
            v-auth="'${moduleName}:${businessName}:edit'"
            v-ripple
          >
            修改</ElButton
          >
          <ElButton
            @click="deleteRole()"
            type="danger"
            plain
            :disabled="multiple"
            v-auth="'${moduleName}:${businessName}:remove'"
            v-ripple
          >
            删除</ElButton
          >
          <MdExcelImport
            :options="importConfig"
            title="Excel-导入${functionName}"
            v-auth="'${moduleName}:${businessName}:import'"
            @import-success="searchData()"
          ></MdExcelImport>
          <ElButton
            @click="handleExport()"
            type="warning"
            plain
            v-auth="'${moduleName}:${businessName}:export'"
            v-ripple
            >导出</ElButton
          >
        </template>
      </ArtTableHeader>

      <!-- 列表数据 -->
      <ArtTable
        :loading="isLoading"
        :data="tableData"
        :columns="columns"
        :pagination="paginationState"
        @selection-change="handleSelectionChange"
        @pagination:size-change="onPageSizeChange"
        @pagination:current-change="onCurrentPageChange"
      >
         #foreach($column in $columns)
         #set($javaField=$column.javaField)
         #set($parentheseIndex=$column.columnComment.indexOf("（"))
         #if($parentheseIndex != -1)
         #set($comment=$column.columnComment.substring(0, $parentheseIndex))
         #else
         #set($comment=$column.columnComment)
         #end
         #if($column.pk)
         #elseif($column.list && $column.htmlType == "datetime")
         <template #${javaField}="{ value }">
           <span>{{ parseTime(value, '{y}-{m}-{d}') }}</span>
         </template>
         #elseif($column.list && $column.htmlType == "imageUpload")
         <template #${javaField}="{ value }">
           <ElImage
             style="width: 50px; height: 50px"
             :src="value"
             :zoom-rate="1.2"
             :max-scale="7"
             :min-scale="0.2"
             :preview-src-list="[value]"
             show-progress
             fit="cover"
           />
         </template>
         #elseif($column.list && "" != $column.dictType && ${dicts} != '')
         <template #${javaField}="{ value }">
           #if($column.htmlType == "checkbox")
           <ArtDict :options="dict.${column.dictType}" :value="value ? value.split(',') : []"></ArtDict>
           #else
           <ArtDict :options="dict.${column.dictType}" :value="value"></ArtDict>
           #end
         </template>
         #elseif($column.list && "" != $javaField)
         #end
         #end
      </ArtTable>

      <!-- 新增/编辑${functionName}弹框 -->
      <ElDialog
        :title="dialogTitle"
        v-model="dialogVisible"
        width="500px"
        align-center
        :close-on-click-modal="false"
      >
        <ElForm ref="formRef" :model="form" :rules="rules" label-width="85px">
          <ElRow>
          #foreach($column in $columns)
          #set($field=$column.javaField)
          #if($column.insert && !$column.pk)
          #if(($column.usableColumn) || (!$column.superColumn))
          #set($parentheseIndex=$column.columnComment.indexOf("（"))
          #if($parentheseIndex != -1)
          #set($comment=$column.columnComment.substring(0, $parentheseIndex))
          #else
          #set($comment=$column.columnComment)
          #end
          #set($dictType=$column.dictType)
          #if($column.htmlType == "input")
            <ElCol :span="24">
                <ElFormItem label="${comment}" prop="${field}">
                #if($column.columnType == 'int')
                  <ElInputNumber
                    v-model="form.${field}"
                    style="width: 100%"
                    :min="1"
                    controls-position="right"
                  />
                #else
                    <ElInput v-model="form.${field}" placeholder="请输入${comment}"></ElInput>
                #end
                </ElFormItem>
            </ElCol>
          #elseif($column.htmlType == "imageUpload")
              <ElCol :span="24">
                <ElFormItem label="${comment}" prop="${field}">
                  <image-upload v-model="form.${field}"/>
                </ElFormItem>
              </ElCol>
          #elseif($column.htmlType == "fileUpload")
          <ElCol :span="24">
            <ElFormItem label="${comment}" prop="${field}">
              <file-upload v-model="form.${field}"/>
            </ElFormItem>
          </ElCol>
          #elseif($column.htmlType == "editor")
          <ElCol :span="24">
              <ElFormItem label="${comment}" prop="${field}">
                <ArtWangEditor
                  v-model="form.${field}"
                  height="400px"
                  placeholder="请输入内容"
                  :exclude-keys="['video']"
                />
              </ElFormItem>
          </ElCol>
          #elseif($column.htmlType == "select" && "" != $dictType)
          <ElCol :span="24">
              <ElFormItem label="${comment}" prop="${field}">
                <ElSelect v-model="form.${field}" placeholder="请选择${comment}">
                  <ElOption
                    v-for="dict in dict.${dictType}"
                    :key="dict.value"
                    :label="dict.label"
          #if($column.javaType == "Integer" || $column.javaType == "Long")
                    :value="parseInt(dict.value)"
          #else
                    :value="dict.value"
          #end
                  ></ElOption>
                </ElSelect>
              </ElFormItem>
          </ElCol>
          #elseif($column.htmlType == "select" && $dictType)
          <ElCol :span="24">
              <ElFormItem label="${comment}" prop="${field}">
                <ElSelect v-model="form.${field}" placeholder="请选择${comment}">
                  <ElOption label="请选择字典生成" value="" />
                </ElSelect>
              </ElFormItem>
          </ElCol>
          #elseif($column.htmlType == "checkbox" && "" != $dictType)
          <ElCol :span="24">
              <ElFormItem label="${comment}" prop="${field}">
                <ElCheckboxGroup v-model="form.${field}">
                  <ElCheckbox
                    v-for="dict in dict.${dictType}"
                    :key="dict.value"
                    :label="dict.value">
                    {{dict.label}}
                  </ElCheckbox>
                </ElCheckboxGroup>
              </ElFormItem>
          </ElCol>
          #elseif($column.htmlType == "checkbox" && $dictType)
          <ElCol :span="24">
              <ElFormItem label="${comment}" prop="${field}">
                <ElCheckboxGroup v-model="form.${field}">
                  <ElCheckbox>请选择字典生成</ElCheckbox>
                </ElCheckboxGroup>
              </ElFormItem>
          </ElCol>
          #elseif($column.htmlType == "radio" && "" != $dictType)
                <ElCol :span="24">
                  <ElFormItem label="${comment}" prop="${field}">
                    <ElRadioGroup v-model="form.${field}">
                      <ElRadio
                        v-for="dict in dict.${dictType}"
                        :key="dict.value"
          #if($column.javaType == "Integer" || $column.javaType == "Long")
                        :value="parseInt(dict.value)"
          #else
                        :value="dict.value"
          #end
                      >{{dict.label}}</ElRadio>
                    </ElRadioGroup>
                  </ElFormItem>
                </ElCol>
          #elseif($column.htmlType == "radio" && $dictType)
                <ElCol :span="24">
                  <ElFormItem label="${comment}" prop="${field}">
                    <ElRadioGroup v-model="form.${field}">
                      <ElRadio value="1">请选择字典生成</ElRadio>
                    </ElRadioGroup>
                  </ElFormItem>
                </ElCol>
          #elseif($column.htmlType == "datetime")
                <ElCol :span="24">
                  <ElFormItem label="${comment}" prop="${field}">
                    <ElDatePicker clearable
                      v-model="form.${field}"
                      type="date"
                      value-format="YYYY-MM-DD"
                      placeholder="选择${comment}">
                    </ElDatePicker>
                  </ElFormItem>
                </ElCol>
          #elseif($column.htmlType == "textarea")
                <ElCol :span="24">
                  <ElFormItem label="${comment}" prop="${field}">
                    <ElInput v-model="form.${field}" type="textarea" placeholder="请输入内容" />
                  </ElFormItem>
                </ElCol>
          #end
          #end
          #end
          #end
          </ElRow>
        </ElForm>

        <template #footer>
          <span class="dialog-footer">
            <ElButton @click="dialogVisible = false">取 消</ElButton>
            <ElButton type="primary" @click="submitForm()">确 定</ElButton>
          </span>
        </template>
      </ElDialog>
    </ElCard>
  </div>
</template>

<script setup lang="ts">
  import { type ${BusinessName}, ${BusinessName}Service } from '@/api/${moduleName}/${businessName}'
  import { useTable } from '@/composables/useTable'
  import ArtButtonTable from '@/components/core/forms/art-button-table/index.vue'
  import { downloadFile } from '@/utils/http'
  import type { FormInstance, FormRules } from 'element-plus'
  import { ElMessage, ElMessageBox } from 'element-plus'
  import { ElButton } from 'element-plus'
  import { useAuth } from '@/composables/useAuth'
  import { parseTime, addDateRange } from '@/utils'
  import { SearchFormItem } from '@/types'
  #if(${dicts} != '')
  import useDict from '@/composables/useDict'
  import ArtDict from '@/components/core/forms/art-dict/index.vue'
  #end


  defineOptions({ name: '${BusinessName}' })

  const { hasAuth } = useAuth()
  #if(${dicts} != '')
  // 字典
  const { dict } = useDict([${dicts}])
  #end
  // 接口
  const { list${BusinessName}, add${BusinessName}, update${BusinessName}, get${BusinessName}, del${BusinessName} } = ${BusinessName}Service

  // 定义表单搜索初始值
  const initialSearchState = {
    ## 先统计符合条件的字段数量
    #set($betweenColumns = [])
    #foreach ($column in $columns)
        #if($column.query && $column.htmlType == "datetime" && $column.queryType == "BETWEEN")
            #set($void = $betweenColumns.add($column))
        #end
    #end
    ## 根据数量来生成
    #if($betweenColumns.size() == 1)
    daterange: [],
    #else
    #foreach ($column in $betweenColumns)
    #set($AttrName = $column.javaField.substring(0,1).toUpperCase() + $column.javaField.substring(1))
    daterange${AttrName}: [],
    #end
    #end
    #foreach ($column in $columns)
    #if($column.query)
    #if($column.htmlType == "datetime" && $column.queryType == "BETWEEN")
    #else
    $column.javaField: undefined#if($foreach.count != $columns.size()),#end
    #end
    #end
    #end
  }

  // 搜索项配置
  const formItems: SearchFormItem[] = [
  #foreach($column in $columns)
  #if($column.query)
  #set($dictType=$column.dictType)
  #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
  #set($parentheseIndex=$column.columnComment.indexOf("（"))
  #if($parentheseIndex != -1)
  #set($comment=$column.columnComment.substring(0, $parentheseIndex))
  #else
  #set($comment=$column.columnComment)
  #end
  #if($column.htmlType == "input")
       {
         label: '${comment}',
         prop: '${column.javaField}',
         type: 'input',
         config: { clearable: true }
       }#if($foreach.count != $columns.size()),#end
  #elseif(($column.htmlType == "select" || $column.htmlType == "radio") && "" != $dictType)
       {
         label: '${comment}',
         prop: '${column.javaField}',
         type: 'select',
         config: { clearable: true },
         options: dict.${dictType}
       }#if($foreach.count != $columns.size()),#end
  #elseif(($column.htmlType == "select" || $column.htmlType == "radio") && $dictType)
      {
         label: '${comment}',
         prop: '${column.javaField}',
         type: 'select',
         config: { clearable: true },
         options: [label:'请选择字典生产',value:'']
      }#if($foreach.count != $columns.size()),#end
  #elseif($column.htmlType == "datetime" && $column.queryType != "BETWEEN")
      {
         label: '${comment}',
         prop: '${column.javaField}',
         type: 'date',
         config: { clearable: true },
      }#if($foreach.count != $columns.size()),#end
  #elseif($column.htmlType == "datetime" && $column.queryType == "BETWEEN")
      {
         label: '${comment}',
         #if($betweenColumns.size() == 1)
         prop: 'daterange',
         #else
         prop: 'daterange${AttrName}',
         #end
         type: 'daterange',
         config: {type: 'daterange',startPlaceholder: '开始时间',endPlaceholder: '结束时间'}
       }#if($foreach.count != $columns.size()),#end
  #end
  #end
  #end
]

  // 响应式表单数据
  const formFilters = reactive({ ...initialSearchState })

  // 重置搜索
  const handleResetSearch = () => {
    Object.assign(formFilters, { ...initialSearchState })
    resetSearch()
  }

  // 搜索处理
  const handleSearch = () => {
    #set($AttrNames='')
    #foreach ($column in $columns)
    #if($column.query && $column.htmlType == "datetime" && $column.queryType == "BETWEEN")
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
       #if($AttrNames == '')
         #set($AttrNames="'${AttrName}'")
       #else
         #set($AttrNames="${AttrNames},'${AttrName}'")
       #end
    #end
    #end
    #if($AttrNames == '')
    Object.assign(searchState, { ...formFilters })
    #elseif($AttrNames.split(',').size() == 1)
    const queryParams = addDateRange(formFilters)
    Object.assign(searchState, { ...queryParams })
    #else
    const queryParams = addDateRange(formFilters, [${AttrNames}])
    Object.assign(searchState, { ...queryParams })
    #end
    searchData()
  }

  // 列表数据构建
  const {
    columns,
    columnChecks,
    tableData,
    isLoading,
    paginationState,
    searchData,
    searchState,
    resetSearch,
    onPageSizeChange,
    onCurrentPageChange,
    refreshAll
  } = useTable<${BusinessName}>({
    // 核心配置
    core: {
      apiFn: list${BusinessName},
      apiParams: {
        pageNum: 1,
        pageSize: 10,
        ...initialSearchState
      },
      columnsFactory: () => [
        { type: 'selection' }, // 勾选列
        #foreach($column in $columns)
        #set($javaField=$column.javaField)
        #set($parentheseIndex=$column.columnComment.indexOf("（"))
        #if($parentheseIndex != -1)
        #set($comment=$column.columnComment.substring(0, $parentheseIndex))
        #else
        #set($comment=$column.columnComment)
        #end
        #if($column.pk)
        #elseif($column.list && ($column.htmlType == "imageUpload" ||  $column.htmlType == "datetime"))
        { label: '${comment}', prop: '${javaField}',align: 'center',useSlot: true },
        #elseif($column.list && "" != $column.dictType && ${dicts} != '')
        { label: '${comment}', prop: '${javaField}',align: 'center',useSlot: true },
        #elseif($column.list && "" != $javaField)
        #if(${foreach.index} == 1)
        { label: '${comment}', prop: '${javaField}' },
        #else
        { label: '${comment}', prop: '${javaField}',align: 'center' },
        #end
        #end
        #end
        {
          prop: 'operation',
          label: '操作',
          width: 180,
          align: 'center',
          fixed: 'right', // 固定列
          formatter: (row) =>
            h('div', { style: 'display: flex; align-items: center;justify-content: center;' }, [
              hasAuth('${moduleName}:${businessName}:edit') &&
                h(ArtButtonTable, {
                  type: 'edit',
                  onClick: () => showDialog('edit', row)
                }),
              hasAuth('${moduleName}:${businessName}:remove') &&
                h(ArtButtonTable, {
                  type: 'delete',
                  onClick: () => deleteRole(row)
                })
            ])
        }
      ]
    }
  })

  // 选中行
  const selectedRows = ref<${BusinessName}[]>([])
  const ids = ref<number[]>([])
  const single = ref<boolean>(true)
  const multiple = ref<boolean>(true)

  /**
   * 处理表格行选择变化
   * @param selection 行数据
   */
  const handleSelectionChange = (selection: ${BusinessName}[]): void => {
    selectedRows.value = selection
    ids.value = selection.map((item) => item.${pkColumn.javaField})
    single.value = selection.length !== 1
    multiple.value = !selection.length
  }

  const dialogVisible = ref(false)
  const form = reactive<Partial<${BusinessName}>>({})
  const isEdit = ref(false)
  const formRef = ref<FormInstance>()
  const dialogTitle = computed(() => isEdit.value ? '编辑${functionName}' : '新增${functionName}')

  const rules = reactive<FormRules>({
  #foreach ($column in $columns)
  #if($column.required)
  #set($parentheseIndex=$column.columnComment.indexOf("（"))
  #if($parentheseIndex != -1)
  #set($comment=$column.columnComment.substring(0, $parentheseIndex))
  #else
  #set($comment=$column.columnComment)
  #end
    $column.javaField: [
      { required: true, message: "$comment不能为空", trigger: #if($column.htmlType == "select" || $column.htmlType == "radio")"change"#else"blur"#end }
    ]#if($foreach.count != $columns.size()),#end
  #end
  #end
  })

  /**
   * 显示新增/编辑${functionName}弹框
   * @param type 弹框类型 add/edit
   * @param row ${BusinessName}
   */
  const showDialog = async (type: string = 'add', row?: ${BusinessName}) => {
    try {
      isEdit.value = type === 'edit'
      resetForm() // 重置表单
      const ${businessName}Id = row?.${businessName}Id ? row.${businessName}Id : (ids.value as unknown as number)
      if (isEdit.value && ${businessName}Id) {
        const { data } = await get${BusinessName}(${businessName}Id)
        Object.assign(form, {
          #foreach ($column in $columns)
          #if($column.javaField == 'createBy' || $column.javaField == 'createTime' || $column.javaField == 'updateBy' || $column.javaField == 'updateTime')
          #elseif($column.htmlType == "checkbox")
            $column.javaField: data.$column.javaField ?? []#if($foreach.count != $columns.size()),#end
          #else
            $column.javaField: data.$column.javaField ?? undefined#if($foreach.count != $columns.size()),#end
          #end
          #end
        })
      }
      dialogVisible.value = true
    } catch {
      //
    }
  }

  // 提交表单
  const submitForm = async () => {
    if (!formRef.value) return
    await formRef.value.validate(async (valid) => {
      if (valid) {
        try {
          if (isEdit.value) {
            await update${BusinessName}(form as ${BusinessName})
          } else {
            await add${BusinessName}(form as ${BusinessName})
          }
          ElMessage.success(isEdit.value ? '编辑成功' : '新增成功')
          dialogVisible.value = false
          searchData()
        } catch {
          //
        }
      }
    })
  }

  // 重置${functionName}表单
  const resetForm = () => {
    formRef.value?.resetFields()
    Object.assign(form, {
    #foreach ($column in $columns)
    #if($column.javaField == 'createBy' || $column.javaField == 'createTime' || $column.javaField == 'updateBy' || $column.javaField == 'updateTime')
    #elseif($column.htmlType == "checkbox")
        $column.javaField: []#if($foreach.count != $columns.size()),#end
    #else
        $column.javaField: undefined#if($foreach.count != $columns.size()),#end
    #end
    #end
    })
  }

  /**
   * 删除${functionName}
   * @param row 行数据
   */
  const deleteRole = async (row?: ${BusinessName} | null) => {
    const ${businessName}Ids: string = row?.${businessName}Id ? row.${businessName}Id.toString() : ids.value.toString()
    try {
      await ElMessageBox.confirm('确定要删除所选项吗？', '提示', { type: 'warning' })
      await del${BusinessName}(${businessName}Ids)
      ElMessage.success('删除成功')
      handleSearch()
    } catch {
      //
    }
  }

  // 导入配置
  const importConfig = {
    importUrl: `${import.meta.env.VITE_API_URL}/${moduleName}/${businessName}/importData`,
    templateUrl: '${moduleName}/${businessName}/importTemplate',
    templateName: '${functionName}模板_' + new Date().getTime() + '.xlsx'
  }

  /**
   * 导出列表excel
   */
  const handleExport = () => {
    downloadFile('${moduleName}/${businessName}/export', { ...searchState }, '${functionName}列表_' + new Date().getTime() + '.xlsx')
  }
</script>

<style lang="scss" scoped>
</style>
